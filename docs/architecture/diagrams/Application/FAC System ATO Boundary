FAC System Cloud boundary view
![FAC.gov  Cloud ATO boundary view]
```plantuml
@startuml FAC_System_Boundary
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(User, "FAC User", "Auditee/Auditor")
Person(User2, "FAC User", "Grantee")
Person(Public, "FAC User", "Public")
Person(Staff, "FAC User", "FAC System Admin")
Person(Agency, "FAC User", "FAC GSA-Agency User")
Person(AgencyApp, "App", "Agency Application")
note as EncryptionNote
All connections depicted are encrypted with TLS 1.2 unless otherwise noted.
end note

Boundary(aws "AWS GovCloud") {
Boundary(cloudgov, "Cloud.gov Boundary") {
   System_Ext(aws_alb, "cloud.gov load-balancer", "AWS ALB")
   System_Ext(cloudgov_router, "<&layers> cloud.gov routers", "Cloud Foundry traffic service")
     
    Boundary(atob, "ATO Boundary") {
        Boundary(backend, "FAC application", "egress-controlled-space") {
            Boundary(django, "FAC Web App", "port 8080") {
                System(admin, "Django Admin interface")
                System(publicinfo, "Django unauthenticated frontend")
                System(pvtinfo, "Django authenticated frontend")
            }
            Boundary(services, "FAC Services") {
                System(api, "REST API", "PostgREST")
                System(scan, "Virus Scanner", "ClamAV")
                System(api_deploy, "Swagger", "Swagger")
            }
        }
        Boundary(proxy, "Proxy services", "egress-permitted-space"){
            System(https_proxy, "web egress proxy", "proxy for HTTP/S connections")
            System(mail_proxy, "mail egress proxy", "proxy for SMTPS connections")
        }
    }
    Boundary(cloudgov-services,"Cloud.gov services") {
        System(db, "Database", "postgres, port 5432")
        System(s3, "Public S3 Bucket-PDF/XLS Blob storage", "Brokered S3, Https 443")
        System(s3_x, "Private S3 Bucket-PDF/XLS Blob storage", "Brokered S3, Https 443")
    }
 }
}

    System(Login, "Login.gov", "Authentication As a Service-ID provider")
    System(datagov, "api.data.gov", "API Access Key Provider")
    System(samgov, "SAM.gov", "UEI Source")
    System(Email, "GSA Email")


AddRelTag("authenticated", $lineColor="#008787", $textColor="#008787")
Rel(User, django, "Submits/edits audits, using https 443")
Rel(User2, django, "Submits/edits/certify audits, using https 443")
Rel(Public, django, "Searches for/reads information, using https 443")
Rel(Agency, django, "Searches for/reads non-public information, using https 443")
Rel(Staff, django, "Manages audits, roles, content, using https 443")

Rel(User, Login, "Verifies identity & authenticates with", "https 443")
Rel(User2, Login, "Verifies identity & authenticates with", "https 443")
Rel(Staff, Login, "Verifies identity & authenticates with", "https 443"")
Rel(Agency, Login, "Verifies identity & authenticates with", "https 443"")
Rel(AgencyApp, datagov, "Routes API pull requests through")



Rel(datagov, api, "Searches, filters, requests audit", "via api.data.gov", $tags="authenticated")
Rel(Login, backend, "Provides identities", "email address")

Rel(api, db, "Fetches (read-only) Audits")
Rel(api, s3, "Fetches (read-only) Audit Attachments")
Rel(api, s3_x, "Fetches (read-only) Audit Attachments")

Rel(django, https_proxy, "Looks up UEI info")
Rel(https_proxy, samgov, "Looks up UEI info")
Rel(django, mail_proxy, "Sends emails using")
Rel(mail_proxy, Email, "Sends emails using")
Rel(django, scan, "Scans attachments")
Rel(django, db, "read/write")
Rel(backend, s3, "Stores single audit packages/Excel files")
Rel(backend, s3_x, "Stores single audit packages/Excel files")

Boundary(gsa_saas, "GSA-authorized SaaS") {
    System_Ext(dap, "DAP", "Analytics collection")
    System_Ext(newrelic, "New Relic", "Monitoring SaaS")
    System_Ext(secureauth, "GSA SecureAuth", "SAML Identity Provider")
}
Rel_(cloudgov_uaa, secureauth, "proxies authentication requests", "SAML/https (443)", "..>")
}
personnel -> dap : **reports usage** \n//[https (443)]//
public -> dap : **reports usage** \n//[https (443)]//
Rel(danjo, newrelic, "reports auditable user events", "tcp (443)")
Rel(personnel, aws_alb, "manage FAC system and search data", "https GET/POST (443)")
Rel(public, aws_alb, "search and download federal open FAC data", "https GET/POST (443)")
Rel(aws_alb, cloudgov_router, "proxies requests", "https GET/POST (443)")
Rel(cloudgov_router, catalog_app, "proxies requests", "https GET/POST (443)")

@enduml
