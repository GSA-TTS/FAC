services:
  #---------------------------------------------
  # Postgres DB
  #---------------------------------------------
  db:
    image: "postgres:15"
    shm_size: 1g
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
  db2:
    image: "postgres:15"
    shm_size: 1g
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
    volumes:
      - postgres-data2:/var/lib/postgresql/data/
    ports:
      - "5431:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10

  #---------------------------------------------
  # Historic data
  #---------------------------------------------
  # historic-data:
  #   image: ghcr.io/gsa-tts/fac-historic-public-csvs/load-historic-public-data:20230912
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: postgres://postgres@db/postgres

  #---------------------------------------------
  # Django app
  #---------------------------------------------
  web:
    build:
      context: .
      dockerfile: "./${DOCKERFILE:-Dockerfile}"
    command: /src/run.sh
    depends_on:
      db:
        condition: service_healthy
      db2:
        condition: service_healthy
      minio:
        condition: service_started
      clamav-rest:
        condition: service_started
      api:
        condition: service_started
    environment:
      # Should these be mode disable locally?
      DATABASE_URL: postgres://postgres@db/postgres?sslmode=disable
      SNAPSHOT_URL: postgres://postgres@db2/postgres?sslmode=disable
      POSTGREST_URL: http://api:3000
      DJANGO_DEBUG: true
      SAM_API_KEY: ${SAM_API_KEY}
      DJANGO_BASE_URL: http://localhost:8000
      DJANGO_SECRET_LOGIN_KEY: ${DJANGO_SECRET_LOGIN_KEY}
      LOGIN_CLIENT_ID: ${LOGIN_CLIENT_ID}
      ENV: ${ENV}
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: 0.0.0.0 127.0.0.1 localhost
      AV_SCAN_URL: http://clamav-rest:${CLAMAV_PORT:-9000}/scan
      DISABLE_AUTH: ${DISABLE_AUTH:-False}
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET:-32_chars_fallback_secret_testing}
      ENABLE_DEBUG_TOOLBAR: false
    env_file:
      - ".env"
    ports:
      - "8000:8000"
    volumes:
      - .:/src
      - /src/node_modules
      - /src/staticfiles

  #---------------------------------------------
  # ClamAV virus scanner
  #---------------------------------------------
  clamav-rest:
    image: ghcr.io/gsa-tts/fac/clamav:latest
    environment:
      MAX_FILE_SIZE: 30M
      SIGNATURE_CHECKS: 1
      PORT: ${CLAMAV_PORT:-9000}
    ports:
      - ${CLAMAV_PORT:-9000}:${CLAMAV_PORT:-9000}

  #---------------------------------------------
  # Minio (S3 clone)
  #---------------------------------------------
  # minio:
  #   container_name: "minio"
  #   image: minio/minio
  #   command: server /tmp/minio --console-address ":9002"
  #   ports:
  #     - "9001:9000"
  #     - "9002:9002"
  #   volumes:
  #     - "minio-vol:/tmp/minio"
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9002" 
    expose:
      - "9001"
      - "9002"
    ports:
      - 9001:9000
      - 9002:9002
    environment:
      MINIO_ROOT_USER: nutnutnut
      MINIO_ROOT_PASSWORD: nutnutnut
      MINIO_API_ROOT_ACCESS: on
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5    
    volumes:
      - minio-vol:/data

  #---------------------------------------------
  # PostgREST API provider
  #---------------------------------------------
  api:
    image: ghcr.io/gsa-tts/fac/postgrest:latest
    ports:
      - "3000:3000"
    expose:
      - "3000"
    environment:
      # This now requires us to `sling` data to db2 for local API testing.
      PGRST_DB_URI: postgres://postgres@db2:5432/postgres
      # PGRST2_DB_URI: postgres://postgres@db:5431/postgres
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
      PGRST_DB_ANON_ROLE: anon
      # See https://postgrest.org/en/stable/references/api/schemas.html#multiple-schemas for multiple schemas
      PGRST_DB_SCHEMAS: "api_v1_0_3,api_v1_1_0,admin_api_v1_1_0,api_v2_0_0"
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET:-32_chars_fallback_secret_testing} # Fallback value for testing environments
      # Enable this to inspect the DB plans for queries via EXPLAIN
      PGRST_DB_PLAN_ENABLED: 1
    depends_on:
      db2:
        condition: service_healthy
volumes:
  postgres-data:
  postgres-data2:
  minio-vol:
