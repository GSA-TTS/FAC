services:
  #---------------------------------------------
  # Postgres DB
  #---------------------------------------------
  db:
    image: "postgres:15"
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
  db2:
    image: "postgres:15"
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
    volumes:
      - postgres-data2:/var/lib/postgresql/data/
    ports:
      - "5431:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10

  #---------------------------------------------
  # Minio (S3 clone)
  #---------------------------------------------
  minio:
    container_name: "minio"
    image: minio/minio
    command: server /tmp/minio --console-address ":9002"
    ports:
      - "9001:9000"
      - "9002:9002"
    volumes:
      - "minio-vol:/tmp/minio"

  #---------------------------------------------
  # PostgREST API provider
  #---------------------------------------------
  api:
    image: ghcr.io/gsa-tts/fac/postgrest:latest
    ports:
      - "3000:3000"
    expose:
      - "3000"
    environment:
      # This now requires us to `sling` data to db2 for local API testing.
      PGRST_DB_URI: postgres://postgres@db2:5432/postgres
      # PGRST2_DB_URI: postgres://postgres@db:5431/postgres
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
      PGRST_DB_ANON_ROLE: anon
      # See https://postgrest.org/en/stable/references/api/schemas.html#multiple-schemas for multiple schemas
      PGRST_DB_SCHEMAS: "api_v1_0_3,api_v1_1_0,admin_api_v1_1_0,api_v2_0_0"
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET:-32_chars_fallback_secret_testing} # Fallback value for testing environments
      # Enable this to inspect the DB plans for queries via EXPLAIN
      PGRST_DB_PLAN_ENABLED: 1
    depends_on:
      db2:
        condition: service_healthy
volumes:
  postgres-data:
  postgres-data2:
  minio-vol:
