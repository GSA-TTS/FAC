---
name: Deploy to cloud.gov
on:
  push:
    branches:
      - main
      - prod
    tags:
      - v1.*
  pull_request:
    branches:
      - main
      - prod
  workflow_dispatch: null
jobs:
  linting:
    runs-on: ubuntu-latest
    env:
      ENV: TESTING
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install linters
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
      - name: Lint with flake8
        working-directory: ./backend
        run: flake8 . --count --max-complexity=10  --show-source --statistics
      - name: Check formatting with black
        working-directory: ./backend
        run: black --check .
      - name: Run bandit
        working-directory: ./backend
        run: bandit -c pyproject.toml -r .
      - name: Run type checking
        working-directory: ./backend
        run: mypy .
  test:
    runs-on: ubuntu-latest
    env:
      ENV: TESTING
    steps:
      - uses: actions/checkout@v2
      - name: Start services
        working-directory: ./backend
        run: docker-compose up -d
      - name: Run Django test suite
        working-directory: ./backend
        run: docker-compose run web bash -c 'coverage run --source="." manage.py test &&
          coverage report -m --fail-under=99'
      - name: Run Django migrations for pa11y tests
        working-directory: ./backend
        run: docker-compose run web python manage.py migrate
      - name: Create superuser for admin access
        working-directory: ./backend
        run: echo "from django.contrib.auth import get_user_model; User =
          get_user_model(); User.objects.create_superuser('a', 'a@a.com', 'a')"
          | docker-compose run web python manage.py shell
      - name: Install pa11y-ci
        working-directory: ./pa11y_tests
        run: npm install
      - name: Run pa11y-ci against admin
        working-directory: ./pa11y_tests
        run: npm run test:admin

  deploy-dev:
    name: Deploy to dev
    if: github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - linting
      - test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Compile with dev docker-compose
        working-directory: ./backend
        run: docker-compose up -d
      - name: Update service keys
        uses: 18f/cg-deploy-action@main
        env:
          SAM_API_KEY: ${{ secrets.SAM_API_KEY }}
          DJANGO_SECRET_LOGIN_KEY: $${{ secrets.DJANGO_SECRET_LOGIN_KEY }}
        with:
          cf_username: ${{ secrets.CF_USERNAME_DEV }}
          cf_password: ${{ secrets.CF_PASSWORD_DEV }}
          cf_org: gsa-tts-oros-fac
          cf_space: dev
          full_command: cf update-user-provided-service fac-key-service -p
            "{\"SAM_API_KEY\":\"$SAM_API_KEY\",
            \"DJANGO_SECRET_LOGIN_KEY\":\"$DJANGO_SECRET_LOGIN_KEY\"}"
      - name: Deploy to cloud.gov
        uses: 18f/cg-deploy-action@main
        with:
          cf_username: ${{ secrets.CF_USERNAME_DEV }}
          cf_password: ${{ secrets.CF_PASSWORD_DEV }}
          cf_org: gsa-tts-oros-fac
          cf_space: dev
          push_arguments: -f backend/manifests/manifest-dev.yml --strategy rolling

  deploy-staging:
    name: Deploy to staging
    if: github.event.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    needs:
      - linting
      - test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Update service keys
        uses: 18f/cg-deploy-action@main
        env:
          SAM_API_KEY: ${{ secrets.SAM_API_KEY }}
          DJANGO_SECRET_LOGIN_KEY: $${{ secrets.DJANGO_SECRET_LOGIN_KEY }}
        with:
          cf_username: ${{ secrets.CF_USERNAME_STAGING }}
          cf_password: ${{ secrets.CF_PASSWORD_STAGING }}
          cf_org: gsa-tts-oros-fac
          cf_space: staging
          full_command: cf update-user-provided-service fac-key-service -p
            "{\"SAM_API_KEY\":\"$SAM_API_KEY\",
            \"DJANGO_SECRET_LOGIN_KEY\":\"$DJANGO_SECRET_LOGIN_KEY\"}"
      - name: Deploy to cloud.gov
        uses: 18f/cg-deploy-action@main
        with:
          cf_username: ${{ secrets.CF_USERNAME_STAGING }}
          cf_password: ${{ secrets.CF_PASSWORD_STAGING }}
          cf_org: gsa-tts-oros-fac
          cf_space: staging
          push_arguments: -f backend/manifests/manifest-staging.yml --strategy rolling

  deploy-production:
    name: Deploy to production
    if: github.event.ref == 'refs/tag/v1.*'
    runs-on: ubuntu-latest
    needs:
      - linting
      - test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Update service keys
        uses: 18f/cg-deploy-action@main
        env:
          SAM_API_KEY: ${{ secrets.SAM_API_KEY }}
          DJANGO_SECRET_LOGIN_KEY: $${{ secrets.DJANGO_SECRET_LOGIN_KEY }}
        with:
          cf_username: ${{ secrets.CF_USERNAME_PROD }}
          cf_password: ${{ secrets.CF_PASSWORD_PROD }}
          cf_org: gsa-tts-oros-fac
          cf_space: production
          full_command: cf update-user-provided-service fac-key-service -p
            "{\"SAM_API_KEY\":\"$SAM_API_KEY\",
            \"DJANGO_SECRET_LOGIN_KEY\":\"$DJANGO_SECRET_LOGIN_KEY\"}"
      - name: Deploy to cloud.gov
        uses: 18f/cg-deploy-action@main
        with:
          cf_username: ${{ secrets.CF_USERNAME_PROD }}
          cf_password: ${{ secrets.CF_PASSWORD_PROD }}
          cf_org: gsa-tts-oros-fac
          cf_space: production
          push_arguments: -f backend/manifests/manifest-production.yml --strategy rolling
