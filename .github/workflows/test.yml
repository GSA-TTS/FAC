---
name: Runs linting and tests
on:
  workflow_call:

jobs:
  linting:
    runs-on: ubuntu-latest
    env:
      ENV: TESTING
      SECRET_KEY: secrets.SECRET_KEY
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install linters
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
      - name: Lint with flake8
        working-directory: ./backend
        run: flake8 . --count --show-source --statistics
      - name: Check formatting with black
        working-directory: ./backend
        run: black --check .
      - name: Run bandit
        working-directory: ./backend
        run: bandit -c pyproject.toml -r .
      - name: Run type checking
        working-directory: ./backend
        run: mypy .
      - name: Run HTML template linting
        working-directory: ./backend
        run: djlint --lint .
  frontend-linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Lint JS & SCSS
        working-directory: ./backend
        run: |
          npm ci
          npm run check-all
  test:
    runs-on: ubuntu-latest
    env:
      ENV: TESTING
      SAM_API_KEY: ${{ secrets.SAM_API_KEY }}"
      DJANGO_BASE_URL: 'http://localhost:8000'
      DJANGO_SECRET_LOGIN_KEY: ${{ secrets.DJANGO_SECRET_LOGIN_KEY }}"
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: '0.0.0.0 127.0.0.1 localhost'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Start services
        working-directory: ./backend
        run: touch .env && docker-compose up -d
      - name: Run Django test suite
        working-directory: ./backend
        run:
          docker-compose run web bash -c 'coverage run --source="." manage.py test &&
          coverage report -m --fail-under=90'
      - name: run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.8.x
          lhci autorun
